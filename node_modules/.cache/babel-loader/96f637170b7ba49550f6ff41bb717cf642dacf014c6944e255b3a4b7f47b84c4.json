{"ast":null,"code":"import create from 'zustand';\nconst useCommentStore = create(set => ({\n  comments: JSON.parse(localStorage.getItem('comments')) || [],\n  addComment: comment => set(state => {\n    const updatedComments = [...state.comments, comment];\n    localStorage.setItem('comments', JSON.stringify(updatedComments));\n    return {\n      comments: updatedComments\n    };\n  }),\n  deleteComment: id => set(state => {\n    const updatedComments = state.comments.filter(c => c.id !== id);\n    localStorage.setItem('comments', JSON.stringify(updatedComments));\n    return {\n      comments: updatedComments\n    };\n  }),\n  editComment: (id, text) => set(state => {\n    const updatedComments = state.comments.map(c => c.id === id ? {\n      ...c,\n      text\n    } : c);\n    localStorage.setItem('comments', JSON.stringify(updatedComments));\n    return {\n      comments: updatedComments\n    };\n  }),\n  loadComments: () => set(() => {\n    const savedComments = JSON.parse(localStorage.getItem('comments')) || [];\n    return {\n      comments: savedComments\n    };\n  })\n}));\nexport default useCommentStore;","map":{"version":3,"names":["create","useCommentStore","set","comments","JSON","parse","localStorage","getItem","addComment","comment","state","updatedComments","setItem","stringify","deleteComment","id","filter","c","editComment","text","map","loadComments","savedComments"],"sources":["/Users/harshit/Programming/Web Development/comments-section/src/store/store.js"],"sourcesContent":["import create from 'zustand';\n\nconst useCommentStore = create((set) => ({\n  comments: JSON.parse(localStorage.getItem('comments')) || [],\n  addComment: (comment) => set((state) => {\n    const updatedComments = [...state.comments, comment];\n    localStorage.setItem('comments', JSON.stringify(updatedComments));\n    return { comments: updatedComments };\n  }),\n  deleteComment: (id) => set((state) => {\n    const updatedComments = state.comments.filter(c => c.id !== id);\n    localStorage.setItem('comments', JSON.stringify(updatedComments));\n    return { comments: updatedComments };\n  }),\n  editComment: (id, text) => set((state) => {\n    const updatedComments = state.comments.map(c => c.id === id ? { ...c, text } : c);\n    localStorage.setItem('comments', JSON.stringify(updatedComments));\n    return { comments: updatedComments };\n  }),\n  loadComments: () => set(() => {\n    const savedComments = JSON.parse(localStorage.getItem('comments')) || [];\n    return { comments: savedComments };\n  }),\n}));\n\nexport default useCommentStore;\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,SAAS;AAE5B,MAAMC,eAAe,GAAGD,MAAM,CAAEE,GAAG,KAAM;EACvCC,QAAQ,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;EAC5DC,UAAU,EAAGC,OAAO,IAAKP,GAAG,CAAEQ,KAAK,IAAK;IACtC,MAAMC,eAAe,GAAG,CAAC,GAAGD,KAAK,CAACP,QAAQ,EAAEM,OAAO,CAAC;IACpDH,YAAY,CAACM,OAAO,CAAC,UAAU,EAAER,IAAI,CAACS,SAAS,CAACF,eAAe,CAAC,CAAC;IACjE,OAAO;MAAER,QAAQ,EAAEQ;IAAgB,CAAC;EACtC,CAAC,CAAC;EACFG,aAAa,EAAGC,EAAE,IAAKb,GAAG,CAAEQ,KAAK,IAAK;IACpC,MAAMC,eAAe,GAAGD,KAAK,CAACP,QAAQ,CAACa,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKA,EAAE,CAAC;IAC/DT,YAAY,CAACM,OAAO,CAAC,UAAU,EAAER,IAAI,CAACS,SAAS,CAACF,eAAe,CAAC,CAAC;IACjE,OAAO;MAAER,QAAQ,EAAEQ;IAAgB,CAAC;EACtC,CAAC,CAAC;EACFO,WAAW,EAAEA,CAACH,EAAE,EAAEI,IAAI,KAAKjB,GAAG,CAAEQ,KAAK,IAAK;IACxC,MAAMC,eAAe,GAAGD,KAAK,CAACP,QAAQ,CAACiB,GAAG,CAACH,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGE,CAAC;MAAEE;IAAK,CAAC,GAAGF,CAAC,CAAC;IACjFX,YAAY,CAACM,OAAO,CAAC,UAAU,EAAER,IAAI,CAACS,SAAS,CAACF,eAAe,CAAC,CAAC;IACjE,OAAO;MAAER,QAAQ,EAAEQ;IAAgB,CAAC;EACtC,CAAC,CAAC;EACFU,YAAY,EAAEA,CAAA,KAAMnB,GAAG,CAAC,MAAM;IAC5B,MAAMoB,aAAa,GAAGlB,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;IACxE,OAAO;MAAEJ,QAAQ,EAAEmB;IAAc,CAAC;EACpC,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,eAAerB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}